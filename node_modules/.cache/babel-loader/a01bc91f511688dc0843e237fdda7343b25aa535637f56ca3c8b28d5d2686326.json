{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport { removeUser } from './user-slice';\nexport const createTask = draftTask => {\n  return {\n    id: nanoid(),\n    ...draftTask\n  };\n};\nconst initialState = {\n  entities: [],\n  loading: false\n};\nexport const fetchTasks = createAsyncThunk('task/fetchTasks', async thunkApi => {\n  const response = await fetch('/api/tasks').then(response => response.json());\n  return response.tasks;\n});\nconst tasksSlice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      const task = createTask(action.payload);\n      state.entities.unshift(task);\n    },\n    removeTask: (state, action) => {\n      const index = state.entities.findIndex(task => task.id === action.payload);\n      state.entities.splice(index, 1);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(removeUser, (state, action) => {\n      const userId = action.payload;\n      for (const task of state.entities) {\n        if (task.user === userId) {\n          task.user = undefined;\n        }\n      }\n    });\n    builder.addCase(fetchTasks.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchTasks.fulfilled, (state, action) => {\n      state.loading = false;\n      state.entities = action.payload;\n    });\n  }\n});\nexport const tasksReducer = tasksSlice.reducer;\nexport const {\n  addTask,\n  removeTask\n} = tasksSlice.actions;\nexport default tasksSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","nanoid","removeUser","createTask","draftTask","id","initialState","entities","loading","fetchTasks","thunkApi","response","fetch","then","json","tasks","tasksSlice","name","reducers","addTask","state","action","task","payload","unshift","removeTask","index","findIndex","splice","extraReducers","builder","addCase","userId","user","undefined","pending","fulfilled","tasksReducer","reducer","actions"],"sources":["/Users/Kuba/supertasker/src/features/tasks-slice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport { removeUser } from './user-slice';\ntype TaskState = {\n  entities: Task[];\n  loading?: boolean;\n};\n\ntype DraftTask = Pick<Task, 'title'>;\n\nexport const createTask = (draftTask: DraftTask): Task => {\n  return { id: nanoid(), ...draftTask };\n};\nconst initialState: TaskState = {\n  entities: [],\n  loading: false,\n};\n\nexport const fetchTasks = createAsyncThunk(\n  'task/fetchTasks',\n  async (thunkApi): Promise<Task[]> => {\n    const response = await fetch('/api/tasks').then((response) =>\n      response.json(),\n    );\n    return response.tasks;\n  },\n);\n\nconst tasksSlice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    addTask: (state, action: PayloadAction<DraftTask>) => {\n      const task = createTask(action.payload);\n      state.entities.unshift(task);\n    },\n    removeTask: (state, action: PayloadAction<Task['id']>) => {\n      const index = state.entities.findIndex(\n        (task) => task.id === action.payload,\n      );\n      state.entities.splice(index, 1);\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(removeUser, (state, action) => {\n      const userId = action.payload;\n      for (const task of state.entities) {\n        if (task.user === userId) {\n          task.user = undefined;\n        }\n      }\n    });\n    builder.addCase(fetchTasks.pending, (state, action) => {\n      state.loading = true;\n    });\n\n    builder.addCase(fetchTasks.fulfilled, (state, action) => {\n      state.loading = false;\n      state.entities = action.payload;\n    });\n  },\n});\n\nexport const tasksReducer = tasksSlice.reducer;\nexport const { addTask, removeTask } = tasksSlice.actions;\nexport default tasksSlice;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAC/E,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,UAAU,QAAQ,cAAc;AAQzC,OAAO,MAAMC,UAAU,GAAIC,SAAoB,IAAW;EACxD,OAAO;IAAEC,EAAE,EAAEJ,MAAM,EAAE;IAAE,GAAGG;EAAU,CAAC;AACvC,CAAC;AACD,MAAME,YAAuB,GAAG;EAC9BC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CACxC,iBAAiB,EACjB,MAAOW,QAAQ,IAAsB;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAACC,IAAI,CAAEF,QAAQ,IACvDA,QAAQ,CAACG,IAAI,EAAE,CAChB;EACD,OAAOH,QAAQ,CAACI,KAAK;AACvB,CAAC,CACF;AAED,MAAMC,UAAU,GAAGhB,WAAW,CAAC;EAC7BiB,IAAI,EAAE,MAAM;EACZX,YAAY;EACZY,QAAQ,EAAE;IACRC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAgC,KAAK;MACpD,MAAMC,IAAI,GAAGnB,UAAU,CAACkB,MAAM,CAACE,OAAO,CAAC;MACvCH,KAAK,CAACb,QAAQ,CAACiB,OAAO,CAACF,IAAI,CAAC;IAC9B,CAAC;IACDG,UAAU,EAAE,CAACL,KAAK,EAAEC,MAAiC,KAAK;MACxD,MAAMK,KAAK,GAAGN,KAAK,CAACb,QAAQ,CAACoB,SAAS,CACnCL,IAAI,IAAKA,IAAI,CAACjB,EAAE,KAAKgB,MAAM,CAACE,OAAO,CACrC;MACDH,KAAK,CAACb,QAAQ,CAACqB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IACjC;EACF,CAAC;EACDG,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC7B,UAAU,EAAE,CAACkB,KAAK,EAAEC,MAAM,KAAK;MAC7C,MAAMW,MAAM,GAAGX,MAAM,CAACE,OAAO;MAC7B,KAAK,MAAMD,IAAI,IAAIF,KAAK,CAACb,QAAQ,EAAE;QACjC,IAAIe,IAAI,CAACW,IAAI,KAAKD,MAAM,EAAE;UACxBV,IAAI,CAACW,IAAI,GAAGC,SAAS;QACvB;MACF;IACF,CAAC,CAAC;IACFJ,OAAO,CAACC,OAAO,CAACtB,UAAU,CAAC0B,OAAO,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MACrDD,KAAK,CAACZ,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC;IAEFsB,OAAO,CAACC,OAAO,CAACtB,UAAU,CAAC2B,SAAS,EAAE,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACZ,OAAO,GAAG,KAAK;MACrBY,KAAK,CAACb,QAAQ,GAAGc,MAAM,CAACE,OAAO;IACjC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMc,YAAY,GAAGrB,UAAU,CAACsB,OAAO;AAC9C,OAAO,MAAM;EAAEnB,OAAO;EAAEM;AAAW,CAAC,GAAGT,UAAU,CAACuB,OAAO;AACzD,eAAevB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}