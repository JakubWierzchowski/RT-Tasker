{"ast":null,"code":"import { randCatchPhrase, randVerb } from '@ngneat/falso';\nimport shuffle from 'lodash.shuffle';\nimport { belongsTo, createServer, Factory, hasMany, Model, RestSerializer } from 'miragejs';\nimport data from './data.json';\nimport { statuses } from '../lib/statuses';\nconst ApplicationSerializer = RestSerializer.extend({});\nconst heroes = data.users.map(hero => {\n  return {\n    realName: hero.realName,\n    alterEgo: hero.alterEgo\n  };\n});\nexport const capitalize = text => {\n  const first = text[0];\n  return first.toUpperCase() + text.slice(1);\n};\nconst getRandom = collection => shuffle(collection)[0];\nexport function makeServer(_ref) {\n  let {\n    environment = 'development'\n  } = _ref;\n  return createServer({\n    environment,\n    serializers: {\n      application: ApplicationSerializer.extend(),\n      user: ApplicationSerializer.extend({}),\n      task: ApplicationSerializer.extend({\n        include: ['user']\n      }),\n      column: ApplicationSerializer.extend({\n        include: ['tasks']\n      })\n    },\n    factories: {\n      task: Factory.extend({\n        title: () => capitalize(`${randVerb()} ${randCatchPhrase().toLowerCase()}`)\n      })\n    },\n    models: {\n      column: Model.extend({\n        tasks: hasMany()\n      }),\n      task: Model.extend({\n        user: belongsTo(),\n        column: belongsTo()\n      }),\n      user: Model.extend({\n        tasks: hasMany()\n      })\n    },\n    routes() {\n      this.timing = 2000;\n      this.namespace = 'api';\n      this.get('columns');\n      this.get('tasks');\n      this.get('users');\n    },\n    seeds(server) {\n      const users = heroes.map(hero => server.create('user', {\n        ...hero\n      }));\n      const columns = statuses.map(title => server.create('column', {\n        title\n      }));\n      server.createList('task', 50).forEach(task => {\n        const user = getRandom(users);\n        const column = getRandom(columns);\n        task.update({\n          user,\n          column\n        });\n      });\n    }\n  });\n}","map":{"version":3,"names":["randCatchPhrase","randVerb","shuffle","belongsTo","createServer","Factory","hasMany","Model","RestSerializer","data","statuses","ApplicationSerializer","extend","heroes","users","map","hero","realName","alterEgo","capitalize","text","first","toUpperCase","slice","getRandom","collection","makeServer","environment","serializers","application","user","task","include","column","factories","title","toLowerCase","models","tasks","routes","timing","namespace","get","seeds","server","create","columns","createList","forEach","update"],"sources":["/Users/Kuba/supertasker/src/api/index.js"],"sourcesContent":["import { randCatchPhrase, randVerb } from '@ngneat/falso';\nimport shuffle from 'lodash.shuffle';\nimport {\n  belongsTo,\n  createServer,\n  Factory,\n  hasMany,\n  Model,\n  RestSerializer,\n} from 'miragejs';\nimport data from './data.json';\nimport { statuses } from '../lib/statuses';\n\nconst ApplicationSerializer = RestSerializer.extend({});\n\nconst heroes = data.users.map((hero) => {\n  return {\n    realName: hero.realName,\n    alterEgo: hero.alterEgo,\n  };\n});\n\nexport const capitalize = (text) => {\n  const first = text[0];\n  return first.toUpperCase() + text.slice(1);\n};\n\nconst getRandom = (collection) => shuffle(collection)[0];\n\nexport function makeServer({ environment = 'development' }) {\n  return createServer({\n    environment,\n\n    serializers: {\n      application: ApplicationSerializer.extend(),\n      user: ApplicationSerializer.extend({}),\n      task: ApplicationSerializer.extend({\n        include: ['user'],\n      }),\n      column: ApplicationSerializer.extend({\n        include: ['tasks'],\n      }),\n    },\n\n    factories: {\n      task: Factory.extend({\n        title: () =>\n          capitalize(`${randVerb()} ${randCatchPhrase().toLowerCase()}`),\n      }),\n    },\n\n    models: {\n      column: Model.extend({\n        tasks: hasMany(),\n      }),\n      task: Model.extend({\n        user: belongsTo(),\n        column: belongsTo(),\n      }),\n      user: Model.extend({\n        tasks: hasMany(),\n      }),\n    },\n\n    routes() {\n      this.timing = 2000;\n      this.namespace = 'api';\n\n      this.get('columns');\n      this.get('tasks');\n      this.get('users');\n    },\n\n    seeds(server) {\n      const users = heroes.map((hero) => server.create('user', { ...hero }));\n      const columns = statuses.map((title) =>\n        server.create('column', { title }),\n      );\n      server.createList('task', 50).forEach((task) => {\n        const user = getRandom(users);\n        const column = getRandom(columns);\n        task.update({ user, column });\n      });\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}